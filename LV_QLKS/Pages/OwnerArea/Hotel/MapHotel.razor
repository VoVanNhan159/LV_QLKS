@page "/maphotel"
@inject DialogService DialogService
@inject IJSRuntime JS
@using BrowserInterop.Extensions
@using BrowserInterop.Geolocation

<div class="row">
    <div class="col">
        <RadzenGoogleMap ApiKey="AIzaSyDWTx7bREpM5B6JKdbzOvMW-RRlhkukmVE" style="height: 400px" Options=@(new Dictionary<string, object> { { "disableDoubleClickZoom", true } })
             Zoom=@zoom Center=@(new GoogleMapPosition() { Lat = 10.02933493084327, Lng = 105.76947927474976 }) MapClick=@OnMapClick MarkerClick=@OnMarkerClick>
            <Markers>
                <RadzenGoogleMapMarker Title="London" Label="London" Position=@(new GoogleMapPosition() { Lat = 51.5074, Lng = 0.1278 }) />
                <RadzenGoogleMapMarker Title="Paris " Label="Paris" Position=@(new GoogleMapPosition() { Lat = 48.8566, Lng = 2.3522 }) />
                @if (showMadridMarker)
                { 
                    <RadzenGoogleMapMarker Title="Madrid " Label="Madrid" Position=@(new GoogleMapPosition() { Lat = 40.4168, Lng = -3.7038 }) />
                }
            </Markers>
        </RadzenGoogleMap>
        <RadzenButton Text="Lấy vị trí hiện tại của bạn" Click="GetGeolocation"></RadzenButton>
    </div>
</div>



@code {
    int zoom = 10;
    bool showMadridMarker;
    Marker markerReturn = new Marker();

    private WindowNavigatorGeolocation geolocationWrapper;
    private GeolocationResult currentPosition;
    protected override async Task OnInitializedAsync(){
        var window = await JS.Window();
        var navigator = await window.Navigator();
        geolocationWrapper = navigator.Geolocation;
    }
    public async Task GetGeolocation()
    {
        currentPosition = await geolocationWrapper.GetCurrentPosition();
        markerReturn.Lat = currentPosition.Location.Coords.Latitude;
        markerReturn.Lng = currentPosition.Location.Coords.Longitude;
        if(await ShowInlineDialogLocation() == true)
        {
            Return();
        }
    }

    async void OnMapClick(GoogleMapClickEventArgs args)
    {
        markerReturn.Lat = args.Position.Lat;
        markerReturn.Lng = args.Position.Lng;
        if(await ShowInlineDialog() == true)
        {
            Return();
        }
    }

    async void OnMarkerClick(RadzenGoogleMapMarker marker)
    {
        markerReturn.Lat = marker.Position.Lat;
        markerReturn.Lng = marker.Position.Lng;
        if(await ShowInlineDialog() == true)
        {
            Return();
        }
    }
    void Return()
    {
        this.DialogService.Close(markerReturn);
    }
    protected async Task<bool> ShowInlineDialog()
    {
        var confirmationResult = await this.DialogService.Confirm("Bạn có muốn chọn này là vị trí khách sạn của bạn không?", "Thông báo", new ConfirmOptions { OkButtonText = "Xác nhận", CancelButtonText = "Trở về" });
        if (confirmationResult == true)
        {
            return true;
        }
        return false;
    }
    protected async Task<bool> ShowInlineDialogLocation()
    {
        var confirmationResult = await this.DialogService.Confirm("Bạn có muốn chọn vị trí hiện tại của bạn là vị trí khách sạn của bạn không?", "Thông báo", new ConfirmOptions { OkButtonText = "Xác nhận", CancelButtonText = "Trở về" });
        if (confirmationResult == true)
        {
            return true;
        }
        return false;
    }
}