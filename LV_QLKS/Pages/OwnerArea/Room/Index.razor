@page "/room/index"
@page "/room"
@using ShareModel.Paging
@using System.Globalization
@using LV_QLKS.Pages.OwnerArea.Hotel
@layout Layout_Owner
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject DialogService DialogService
@inject IToastService toastService
@inject NavigationManager NavigationManager

@*<div class="main-content">
    <div class="section__content section__content--p30">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>
                        STT
                    </th>
                    <th>
                        Tên phòng
                    </th>
                    <th>
                        Thuộc khách sạn
                    </th>
                    <th>
                        Tầng
                    </th>
                    <th>
                        Sức chứa
                    </th>
                    <th>
                        Trạng thái
                    </th>
                    <th>
                        
                    </th>
                </tr>
            </thead>
            <tbody> 
                @if (rooms.Count > 0)
                {
                    int stt = 1;
                    foreach (var item in rooms)
                    {
                        <tr>
                            <td>
                                @stt
                                @{
                                    stt++;
                                }
                            </td>
                            <td>
                                @item.RoomName
                            </td>
                            <td>
                                @{
                                    var hotelTemp = new Hotel();
                                    foreach (var hotel in hotels)
                                    {
                                        if(hotel.HotelId == item.HotelId){
                                            hotelTemp = hotel;
                                            break;
                                        }
                                    }
                                }
                                @hotelTemp.HotelName
                            </td>
                            <td>
                                @{
                                    var floorTemp = new Floor();
                                    foreach (var floor in floors)
                                    {
                                        if(floor.FloorId == item.FloorId)
                                        {
                                            floorTemp = floor;
                                            break;
                                        }
                                    }
                                }
                                @floorTemp.FloorName
                            </td>
                            <td>
                                @{
                                    var torTemp = new Typeofroom();
                                    foreach(var tor in typeofrooms)
                                    {
                                        if(tor.TorId == item.TorId)
                                        {
                                            torTemp = tor;
                                            break;
                                        }
                                    }
                                }
                                @torTemp.TorCapacity
                            </td>
                            <td>
                                @if (item.RoomStatus == true)
                                {
                                    <p style="color:limegreen">Đang sử dụng</p>
                                }
                                else
                                {
                                    <p style="color:gray">Tạm ngưng sử dụng</p>
                                }
                            </td>
                            <td>
                                <button style="color:blue" @onclick="() => ShowEditRoom(item.RoomId)"><i class="fa fa-pencil-square-o" aria-hidden="true"></i></button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
    <br />
    <PageNumber MetaData="MetaData" Spread="2" SelectedPage="SelectedPage"></PageNumber>
</div>
*@
<div class="main-content">
    <div class="section__content section__content--p30">
        <RadzenDataGrid EmptyText="Không có dữ liệu, vui lòng kiểm tra lại" Data="@rooms" TItem="Room" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Center" AllowSorting="true" 
            PageSizeOptions="@pageSizeOptions" PageSize="0" PageSizeText="mẫu tin/trang" ShowPagingSummary="@showPagerSummary" PagingSummaryFormat="@pagingSummaryFormat" Page="@OnPage">
            <Columns>
                <RadzenDataGridColumn TItem="Room" Property="RoomName" Title="Tên phòng" />
                <RadzenDataGridColumn TItem="Room" Property="Hotel.HotelName" Title="Tên khách sạn">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Width="10%" TItem="Room" Property="Floor.FloorName" Title="Thuộc tầng">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Width="10%" TItem="Room" Property="Tor.TorCapacity" Title="Sức chứa">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Room" Width="15%"Title="Trạng thái">
                    <Template Context="data">
                        @if (data.RoomStatus == true)
                        {
                            <p style="color:limegreen">Đang sử dụng</p>
                        }
                        else
                        {
                            <p style="color:gray">Tạm ngưng sử dụng</p>
                        } 
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Width="10%" TItem="Room">
                    <Template Context="data">
                        <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="build" Class="m-1" Click=@(() => ShowEditRoom(data.RoomId)) />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </div>
</div>
@code {

    string pagingSummaryFormat = "Trang hiển thị {0}/{1} (tổng cộng {2} mẫu tin)";

    IEnumerable<int> pageSizeOptions = new int[] { 5, 10, 15, 20 };
    bool showPagerSummary = true;

    void OnPage(PagerEventArgs args)
    {
    //
    }
    //Khai báo các biến
    List<Room> rooms = new List<Room>();
    List<ShareModel.Hotel> hotels = new List<ShareModel.Hotel>();
    ShareModel.User owner = new ShareModel.User();
    List<Floor> floors = new List<Floor>();
    List<Typeofroom> typeofrooms = new List<Typeofroom>();

    //Phân trang
    public MetaData MetaData { get; set; } = new MetaData();
    private PagingParameters paging = new PagingParameters();

    //Khai báo các service
    HotelService hotelService = new HotelService();
    UserService userService = new UserService();
    RoomService roomService = new RoomService();
    FloorService floorService = new FloorService();
    TypeOfRoomService typeOfRoomService = new TypeOfRoomService();

    protected override async Task OnInitializedAsync()
    {

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var phone = await sessionStorage.GetItemAsync<string>("owner_phone");
                owner = await userService.GetUser(phone);
                var roomTemps = await roomService.GetAllRoomOfOwner(owner.UserPhone);
                foreach (var item in roomTemps)
                {
                    var tor = await typeOfRoomService.GetTypeOfRoom(item.TorId);
                    var hotel = await hotelService.GetHotel(item.HotelId);
                    var floor = await floorService.GetFloor(item.FloorId);
                    var roomAdd = item;
                    roomAdd.Tor = tor;
                    roomAdd.Hotel = hotel;
                    roomAdd.Floor = floor;
                    rooms.Add(roomAdd);
                }
                StateHasChanged();
            }
            catch(Exception ex)
            {
                Console.Write(ex.ToString());
            }
        }
    }
    protected string GetAddressHotel(int hotel_id)
    {
        return hotelService.GetAddressHotel(hotel_id);
    }
    protected async void ShowEditRoom(int id)
    {
        var res = await DialogService.OpenAsync<OwnerArea.Room.Edit>("",
             new Dictionary<string, object>() { { "id", id } },
             new DialogOptions() { Width = "800px", Height = "500px", Resizable = true, Draggable = true });
        if(res == true)
        {
            NavigationManager.NavigateTo("/room/create");
            NavigationManager.NavigateTo("/room/index");
        }
    }
    protected Typeofroom GetTypeofroom(Room item)
    {
        foreach(var tor in typeofrooms)
        {
            if(tor.TorId == item.TorId)
            {
                return tor;
            }
        }
        return null;
    }
    protected Hotel GetHotel(Room item)
    {
        foreach(var hotel in hotels)
        {
            if(hotel.HotelId == item.HotelId)
            {
                return hotel;
            }
        }
        return null;
    }
    protected Floor GetFloor(Room item)
    {
        foreach(var floor in floors)
        {
            if(floor.FloorId == item.FloorId)
            {
                return floor;
            }
        }
        return null;
    }
}
